variables:
    isReleaseMode: ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}
  
trigger:
    branches:
      include:
        - master
    tags:
      include:
        - '*'
  
jobs:
  - job: 'Build_Windows'
    pool:
      vmImage: 'windows-2019'
    variables:
      build_config: RelWithDebInfo
      DepsBasePath: 'D:\obsdependencies'
      DepsPath32: '$(DepsBasePath)\win32'
      DepsPath64: '$(DepsBasePath)\win64'
      QtBaseDir: 'D:\QtDep'
      vcpkgToolchain: 'c:/vcpkg/scripts/buildsystems/vcpkg.cmake'
      VCPKG_DEFAULT_TRIPLET_64: 'x64-windows-static'
      VCPKG_DEFAULT_TRIPLET_86: '86-windows-static'
      OpenSSL32: 'c:/vcpkg/installed/x86-windows-static'
      OpenSSL64: 'c:/vcpkg/installed/x64-windows-static'
      QTDIR32: '$(QtBaseDir)\5.10.1\msvc2017'
      QTDIR64: '$(QtBaseDir)\5.10.1\msvc2017_64'
      OBSPath: 'D:\obs-studio'
    steps:
      - checkout: self
        submodules: true
  
      - script: ./CI/install-qt-win.cmd
        displayName: 'Install Qt'
        env:
          QtBaseDir: $(QtBaseDir)
  
      - task: Cache@2
        displayName: Restore cached iOS Camera Plugin Dependencies
        inputs:
          key: 'obscam-cache-3 | "$(Agent.OS)"'
          restoreKeys: |
            obscam-cache-3 | "$(Agent.OS)"
          path: 'c:\vcpkg\installed\'

      - script: ./CI/install-ios-camera-dependencies.cmd
        displayName: 'Install iOS Camera Plugin Dependencies'
        env:
          vcpkgToolchain: '$(vcpkgToolchain)'

      - task: Cache@2
        displayName: Restore cached OBS Studio dependencies
        inputs:
          key: 'obsdeps-3 | "$(Agent.OS)"'
          restoreKeys: |
            obsdeps-3 | "$(Agent.OS)"
          path: $(DepsBasePath)
  
      - script: ./CI/download-obs-deps.cmd
        displayName: 'Download OBS Studio dependencies'
  
      - task: Cache@2
        displayName: Restore cached OBS Studio builds
        inputs:
          key: 'obs-build-2 | "$(Agent.OS)"'
          restoreKeys: |
            obs-build-2 | "$(Agent.OS)"
          path: $(OBSPath)
  
      - script: ./CI/checkout-cmake-obs-windows.cmd
        displayName: 'Checkout & CMake OBS Studio'
        env:
          build_config: $(build_config)
          DepsPath32: $(DepsPath32)
          DepsPath64: $(DepsPath64)
          QTDIR32: $(QTDIR32)
          QTDIR64: $(QTDIR64)
          OBSPath: $(OBSPath)
  
      - task: MSBuild@1
        displayName: 'Build OBS Studio 32-bit'
        inputs:
          msbuildArguments: '/m /p:Configuration=$(build_config)'
          solution: '$(OBSPath)\build32\obs-studio.sln'
  
      - task: MSBuild@1
        displayName: 'Build OBS Studio 64-bit'
        inputs:
          msbuildArguments: '/m /p:Configuration=$(build_config)'
          solution: '$(OBSPath)\build64\obs-studio.sln'
  
      - script: ./CI/prepare-windows.cmd
        displayName: 'CMake obs-ios-camera-source'
        env:
          build_config: $(build_config)
          QTDIR32: $(QTDIR32)
          QTDIR64: $(QTDIR64)
          OBSPath: $(OBSPath)
          vcpkgToolchain: $(vcpkgToolchain)
          VCPKG_DEFAULT_TRIPLET_64: ${VCPKG_DEFAULT_TRIPLET_64}
          VCPKG_DEFAULT_TRIPLET_86: ${VCPKG_DEFAULT_TRIPLET_86}
          OpenSSL32: $(OpenSSL32)
          OpenSSL64: $(OpenSSL64)
  
      - task: MSBuild@1
        displayName: 'Build obs-ios-camera-source 32-bit'
        inputs:
          msbuildArguments: '/m /p:Configuration=$(build_config)'
          solution: '.\build32\obs-ios-camera-source.sln'
  
      - task: MSBuild@1
        displayName: 'Build obs-ios-camera-source 64-bit'
        inputs:
          msbuildArguments: '/m /p:Configuration=$(build_config)'
          solution: '.\build64\obs-ios-camera-source.sln'
  
      - script: ./CI/package-windows.cmd
        displayName: 'Package obs-ios-camera-source'
  
      - task: PublishBuildArtifacts@1
        displayName: 'Upload package artifacts'
        inputs:
          pathtoPublish: './package'
          artifactName: 'windows_build'
  
  - job: 'Build_macOS'
    pool:
      vmImage: 'macos-10.14'
    steps:
      - checkout: self
        submodules: true
  
      - script: ./CI/install-dependencies-macos.sh
        displayName: 'Install dependencies'
  
      - script: ./CI/install-build-obs-macos.sh
        displayName: 'Build OBS'
  
      - script: ./CI/build-macos.sh
        displayName: 'Build obs-ios-camera-source'
  
      - task: InstallAppleCertificate@2
        displayName: 'Install release signing certificates'
        condition: eq(variables['isReleaseMode'], true)
        inputs:
          certSecureFile: 'macos-certs.p12'
          certPwd: $(secrets.macOS.certificatesImportPassword)
  
      - script: ./CI/package-macos.sh
        displayName: 'Package obs-ios-camera-source'
        env:
          RELEASE_MODE: $(isReleaseMode)
          CODE_SIGNING_IDENTITY: $(secrets.macOS.codeSigningIdentity)
          INSTALLER_SIGNING_IDENTITY: $(secrets.macOS.installerSigningIdentity)
          AC_USERNAME: $(secrets.macOS.notarization.username)
          AC_PASSWORD: $(secrets.macOS.notarization.password)
          AC_PROVIDER_SHORTNAME: $(secrets.macOS.notarization.providerShortName)
  
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: './release'
          artifactName: 'macos_build' 

